# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:57:00+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import UploadFile
from starlette.requests import Request

from models import (
    AccountGetResponse,
    AuthFailed,
    ImprovementProgramJson,
    ImprovementProgramJsonResponse,
    ImprovePostResponse,
    RateLimit,
    RemoveBgJson,
    RemoveBgJsonResponse,
    RemovebgPostResponse,
    RemovebgPostResponse1,
)

app = MCPProxy(
    description='Remove the background of any image',
    title='Background Removal API',
    version='1.0.0',
    servers=[{'url': 'https://api.remove.bg/v1.0'}],
)


@app.get(
    '/account',
    description=""" Get the current credit balance and number of free API calls.

Notes:

* Balance changes may be delayed by several seconds. To locally keep track of your credit balance, you should therefore only call this endpoint initially (or e.g. when the user manually triggers a refresh), then use the `X-Credits-Charged` response header returned with each image processing response to adjust the local balance.

* The "*sizes*" field is always "all", is deprecated and will soon be removed.
 """,
    tags=['user_account_management'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def get_account():
    """
    Fetch credit balance and free API calls.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/improve',
    description=""" Submit an image to the remove.bg Improvement program
* Contribute an image that remove.bg is currently not able to remove the background from properly
* Help us make remove.bg better
* Get better results for similiar images in the future

Notes:
  * By submitting images through the API you agree to the <a target="_blank" rel="noopener" href="/ipc">Improvement Program Conditions</a>
  * File size: up to 12MB
  * up to 100 files per day. <br> Higher Rate Limits are available for Enterprise customers <a href="/support/contact?subject=Improvement+Program+Rate+Limit">upon request</a>.

Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.

Please note that submissions are used on a best-effort basis and the extent of expected improvement varies depending on many factors, including the number of provided images, their complexity and visual similarity. Improvements usually take several weeks to become effective.
 """,
    tags=['software_program_updates'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_improve(body: ImprovementProgramJson):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/removebg',
    description=""" Removes the background of a JPG/PNG image.

* File size: up to 12 MB
* Image source: File upload (binary or as base64 encoded string) or download from URL
* Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images)
* Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)

Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
 """,
    tags=['image_editing_operations'],
    security=[
        APIKeyHeader(name="X-API-Key"),
    ],
)
def post_removebg(body: RemoveBgJson):
    """
    Remove the background of an image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
